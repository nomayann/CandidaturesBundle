<?php

namespace NomayaCandidaturesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CandidatureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CandidatureRepository extends EntityRepository
{

	public function findAllOrderedBy($column, $direction, $search = null, $start = 0, $limit = 0){
        $query = array();
        $query[] = 'SELECT c, en, SIZE(c.evenements) as nbEvenements';
        $query[] = 'FROM CandidaturesBundle:Candidature c';
        $query[] = 'JOIN c.entreprise en';
        if (!is_null($search))
        {
            $query[] = 'WHERE en.name LIKE :search';
            $query[] = 'OR c.libOffre LIKE :search';
            $query[] = 'OR c.refOffre LIKE :search';
        }
        $query[] = 'ORDER BY c.'.$column.' '.$direction.' ';
        $dql = join(' ', $query);
		$em =  $this->getEntityManager()
                    ->createQuery($dql);
        if (!is_null($search))
            $em->setParameter('search', '%'.$search.'%');
        if ($start)
        	$em->setFirstResult($start);
        if ($limit)
        	$em->setMaxResults($limit);
        return $em->getResult();		
	}

	public function findAllOrderedByDate($search = null){
		return $this->findAllOrderedBy('dateOffre', 'DESC', $search);
	}

    public function findAllOrderedByUpdatedAtDate($search = null){
        return $this->findAllOrderedBy('updatedAt', 'DESC', $search);
    }

	public function findOneWithRelated($id){
		return $this->getEntityManager()
	        ->createQuery(
	            'SELECT c, e, d, ev, t, co, evd FROM CandidaturesBundle:Candidature c 
	            JOIN c.entreprise e
	            LEFT JOIN c.documents d
	            LEFT JOIN c.evenements ev
	            LEFT JOIN ev.typeEvenement t
	            LEFT JOIN ev.contact co
	            LEFT JOIN ev.documents evd
	            WHERE c.id = :id
	           	ORDER BY ev.date DESC
				'
	        )
	        ->setParameter('id', $id)
	        ->getSingleResult();
	}

    /**
    * Compte des candidatures par semaine 
    * sur les $days derniers jours 
    * La période est arrondie pour que la première semaine soit comptée en intégralité
    */
	public function getCandidaturesStats($days = 30){

        $sql = 'SELECT COUNT(*) as count, 
                YEARWEEK(created_at,3) as yearweek, 
                DATE_SUB(created_at,INTERVAL WEEKDAY(created_at) DAY) as monday,
                DATE_ADD(created_at,INTERVAL (6 - WEEKDAY(created_at)) DAY) as sunday
                FROM Candidature
                WHERE DATE_SUB(CURDATE(),INTERVAL '.$days .' + WEEKDAY(DATE_SUB(CURDATE(),INTERVAL '.$days. ' DAY)) DAY) <= created_at
                GROUP BY yearweek'	;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
	}

    /**
    * Compte le nombre de candidatures total par type de candidature
    */
	public function getCandidaturesStatsByType(){

        $sql = 'SELECT tc.name AS name, count( * ) AS count
				FROM `Candidature` AS c
				JOIN TypeCandidature AS tc ON c.typeCandidature_id = tc.id
				GROUP BY c.typeCandidature_id'	;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
	}

}
