<?php

namespace NomayaCandidaturesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
	public function findAllOrderedBy($column, $direction, $start = 0, $limit = 0, $linkCandidature = false, $toDo = null){

        $candidatureColumn = $linkCandidature? ', ca' : '';
        $candidatureJoin = $linkCandidature? ' JOIN e.candidature ca' : '';
         if(!is_null($toDo)){
            $toDoClause = ' WHERE e.toDo = '.$toDo.' ';
        } else { $toDoClause = ''; }

		$em =  $this->getEntityManager()
            ->createQuery(
                'SELECT e, ca, c, d, t, en '. $candidatureColumn .'
                FROM CandidaturesBundle:Evenement e 
                JOIN e.candidature ca
                LEFT JOIN e.contact c
                LEFT JOIN c.entreprise en
                LEFT JOIN e.documents d
                JOIN e.typeEvenement t 
                ' . $candidatureJoin . $toDoClause . '
                ORDER BY e.'.$column.' '.$direction.' '
            );
        if ($start)
        	$em->setFirstResult($start);
        if ($limit)
        	$em->setMaxResults($limit);
        return $em->getResult();		
	}


    /**
    * Compte des évènements par semaine 
    * sur les $days derniers jours 
    * La période est arrondie pour que la première semaine soit comptée en intégralité
    */
	public function getEvenementsStats($days = 30){

        $sql = 'SELECT COUNT(*) as count, 
                YEARWEEK(date,3) as yearweek, 
                DATE_SUB(date,INTERVAL WEEKDAY(date) DAY) as monday,
                DATE_ADD(date,INTERVAL (6 - WEEKDAY(date)) DAY) as sunday
                FROM Evenement
                WHERE DATE_SUB(CURDATE(),INTERVAL '.$days .' + WEEKDAY(DATE_SUB(CURDATE(),INTERVAL '.$days. ' DAY)) DAY) <= date
                GROUP BY yearweek'	;
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
	}

	public function findAllOrderedByDate($start = 0, $limit = 0, $linkCandidature = false){
		return $this->findAllOrderedBy('date', 'DESC', $start, $limit, $linkCandidature);
	}
}
